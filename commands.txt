# ===================== WEEK 1 COMMANDS =====================
# Step 1: Initial Setup
# Install required tools if not already installed
brew install minikube
brew install kubectl
brew install docker

# Step 2: Create Project Structure
mkdir app k8s
cd app

# Step 3: Create Flask Application
# Create requirements.txt with:
#   flask
#   redis
#   python-dotenv

# Create app.py with Flask application code
# Create templates/index.html for frontend
# Create Dockerfile for containerization

# Step 4: Test Locally
docker build -t url-shortener:latest .
docker run -p 5000:5000 url-shortener:latest

# ===================== WEEK 2 COMMANDS =====================
how to run:

minikube start

eval $(minikube -p minikube docker-env)

# Build the app image (needs Dockerfile here)
cd app
docker build -t url-shortener:latest .
cd ../k8s

# Apply Kubernetes configurations
kubectl apply -f redis-deployment.yaml
kubectl apply -f url-shortener-deployment.yaml

kubectl get pods -l app=redis
kubectl get pods -l app=url-shortener -w

kubectl get services

minikube tunnel --> (in new terminal window)

get ip address from below command
kubectl get service url-shortener-service

# enter http://<EXTERNAL-IP> in your browser

# ===================== WEEK 3 COMMANDS =====================
# Step 1: Enable and Setup Autoscaling

# Enable metrics server for HPA
minikube addons enable metrics-server

# Apply HPA configuration
kubectl apply -f hpa.yaml

# Step 2: Monitor Deployments and Services
kubectl get pods -l app=redis
kubectl get pods -l app=url-shortener -w
kubectl get services
kubectl get hpa

# Step 3: Setup Access
# Start tunnel in new terminal
minikube tunnel

# Get service IP
kubectl get service url-shortener-service

# Step 4: Monitor Scaling and Metrics
kubectl top pods
kubectl get hpa url-shortener-hpa -w

# Step 5: Load Testing
# First install hey: 
brew install hey
# Then run test (replace IP with your EXTERNAL-IP):
hey -c 20 -z 60s http://127.0.0.1/

# Monitor pods during load test
kubectl get pods -w